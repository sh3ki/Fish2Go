import React, { useEffect, useState, useMemo } from "react";
import axios from "axios";
import AppLayout from "@/layouts/app-layout";
import { type BreadcrumbItem } from "@/types";
import { Head } from "@inertiajs/react";
import Chart from "react-apexcharts";
import dayjs from "dayjs"; // For date formatting
import { LayoutGrid, ShoppingCart, ClipboardList, Users, PhilippinePeso, HandCoins, CreditCard, Receipt, Calculator, Wallet, DollarSign, BanknoteIcon } from "lucide-react";

const breadcrumbs: BreadcrumbItem[] = [
  {
    title: "Dashboard",
    href: "/admin/dashboard",
  },
];

// ðŸ“Œ Skeleton Loader Component
const SkeletonLoader = ({ height, width }) => (
  <div
    className="animate-pulse bg-gray-300 dark:bg-gray-700 rounded"
    style={{ height, width }}
  ></div>
);

// ðŸ“Œ Error Message Component
const ErrorMessage = ({ message }) => (
  <div className="text-red-500 text-center py-4">{message}</div>
);

// ðŸ“Œ Pagination Component
const Pagination = ({ currentPage, totalPages, onPageChange }) => (
  <div className="flex justify-center items-center space-x-2 mt-4">
    <button
      disabled={currentPage === 1}
      onClick={() => onPageChange(currentPage - 1)}
      className="px-4 py-2 bg-gray-300 dark:bg-gray-700 rounded disabled:opacity-50"
    >
      Previous
    </button>
    <span className="text-black dark:text-white">
      Page {currentPage} of {totalPages}
    </span>
    <button
      disabled={currentPage === totalPages}
      onClick={() => onPageChange(currentPage + 1)}
      className="px-4 py-2 bg-gray-300 dark:bg-gray-700 rounded disabled:opacity-50"
    >
      Next
    </button>
  </div>
);

// ðŸ“Œ Sales Chart Component
const SalesOverviewChart = ({ salesData }) => {
  const maxSales = Math.max(...salesData.map((data) => data.sales), 0); // Determine the maximum sales value

  const options = {
    chart: {
      type: "line",
      toolbar: { show: false },
      zoom: { enabled: false },
    },
    stroke: {
      curve: "smooth",
      width: 3,
    },
    xaxis: {
      type: "category",
      categories: salesData.map((data) => dayjs(data.date).format("DD MMM")), // Display full date (e.g., 01 Jan)
      labels: {
        style: { colors: "#666" },
      },
    },
    yaxis: {
      min: 0,
      max: maxSales, // Set the maximum value dynamically
      labels: {
        style: { colors: "#666" },
        formatter: (value) => `â‚± ${value.toLocaleString()}`, // Format as currency
      },
    },
    tooltip: {
      theme: "dark",
      x: {
        formatter: (value) => `Date: ${value}`, // Show full date in tooltip
      },
    },
    grid: {
      borderColor: "rgba(255,255,255,0.2)",
    },
  };

  const series = [
    {
      name: "Sales",
      data: salesData.map((data) => data.sales),
    },
  ];

  return (
    <div className="bg-gray-200 dark:bg-gray-800 p-4 rounded-xl shadow-md w-full">
     
      <Chart options={options} series={series} type="line" height={350} />
    </div>
  );
};

const getCurrentMonthYear = () => {
  const now = new Date();
  return {
    month: now.getMonth() + 1, // Months are 0-indexed
    year: now.getFullYear(),
  };
};

// ðŸ“Œ Main Dashboard Component
export default function Dashboard({ totalProducts, totalInventory, staffUsers, todayFinancials }) {
  const [categoryData, setCategoryData] = useState([]);
  const [totalSales, setTotalSales] = useState(0);
  const [staffError, setStaffError] = useState(null);
  const [staffPage, setStaffPage] = useState(1);
  const staffPerPage = 5;
  const totalStaffPages = Math.ceil(staffUsers.length / staffPerPage);

  const [salesData, setSalesData] = useState([]);
  const [productSalesData, setProductSalesData] = useState([]);
  const [paymentData, setPaymentData] = useState({
    cash: { count: 0, percentage: 0, total: 0 },
    gcash: { count: 0, percentage: 0, total: 0 },
    foodpanda: { count: 0, percentage: 0, total: 0 },
    grabfood: { count: 0, percentage: 0, total: 0 },
  });
  const [paymentSeries, setPaymentSeries] = useState([]);
  const [salesLoading, setSalesLoading] = useState(true);
  const [productLoading, setProductLoading] = useState(true);
  const [paymentLoading, setPaymentLoading] = useState(true);

  const [salesFilterDate, setSalesFilterDate] = useState(getCurrentMonthYear());
  const [productSalesFilterDate, setProductSalesFilterDate] = useState(getCurrentMonthYear());
  const [paymentFilterDate, setPaymentFilterDate] = useState(getCurrentMonthYear());

  const [productSalesPage, setProductSalesPage] = useState(1);
  const productsPerPage = 10;

  const handleDateChange = (setFilterDate) => (e) => {
    const { name, value } = e.target;
    setFilterDate((prev) => ({ ...prev, [name]: parseInt(value, 10) }));
  };

  const fetchSalesData = useMemo(() => {
    return () => {
      setSalesLoading(true);
      axios
        .get(`/api/sales-data?month=${salesFilterDate.month}&year=${salesFilterDate.year}`)
        .then((response) => {
          const formattedData = response.data.map((item) => ({
            date: dayjs(item.date).format("DD MMM"),
            sales: item.sales,
          }));
          setSalesData(formattedData);
          setSalesLoading(false);
        })
        .catch((error) => {
          console.error("Error fetching sales data!", error);
          setSalesData([]);
          setSalesLoading(false);
        });
    };
  }, [salesFilterDate]);

  const fetchProductSalesData = useMemo(() => {
    return () => {
      setProductLoading(true);
      axios
        .get(`/api/product-sales-data?month=${productSalesFilterDate.month}&year=${productSalesFilterDate.year}`)
        .then((response) => {
          setProductSalesData(response.data);
          setProductLoading(false);
        })
        .catch((error) => {
          console.error("Error fetching product sales data!", error);
          setProductSalesData([]);
          setProductLoading(false);
        });
    };
  }, [productSalesFilterDate]);

  const fetchPaymentData = useMemo(() => {
    return () => {
      setPaymentLoading(true);
      axios
        .get(`/admin/dashboard/payment-method-percentages?month=${paymentFilterDate.month}&year=${paymentFilterDate.year}`)
        .then((response) => {
          const data = response.data;
          setPaymentData(data);
          setPaymentSeries([
            data.cash.percentage,
            data.gcash.percentage,
            data.foodpanda.percentage,
            data.grabfood.percentage,
          ]);
          setPaymentLoading(false);
        })
        .catch((error) => {
          console.error("Error fetching payment percentages!", error);
          setPaymentData({
            cash: { count: 0, percentage: 0, total: 0 },
            gcash: { count: 0, percentage: 0, total: 0 },
            foodpanda: { count: 0, percentage: 0, total: 0 },
            grabfood: { count: 0, percentage: 0, total: 0 },
          });
          setPaymentSeries([]);
          setPaymentLoading(false);
        });
    };
  }, [paymentFilterDate]);

  const sortedProductSalesData = useMemo(() => {
    return [...productSalesData].sort((a, b) => b.total_sales - a.total_sales);
  }, [productSalesData]);

  const paginatedProductSalesData = useMemo(() => {
    const startIndex = (productSalesPage - 1) * productsPerPage;
    const endIndex = startIndex + productsPerPage;
    return sortedProductSalesData.slice(startIndex, endIndex);
  }, [sortedProductSalesData, productSalesPage]);

  const totalProductSalesPages = Math.ceil(sortedProductSalesData.length / productsPerPage);

  useEffect(() => {
    fetchSalesData();
  }, [fetchSalesData]);

  useEffect(() => {
    fetchProductSalesData();
  }, [fetchProductSalesData]);

  useEffect(() => {
    fetchPaymentData();
  }, [fetchPaymentData]);

  useEffect(() => {
    axios
      .get("/api/category-data")
      .then((response) => setCategoryData(response.data))
      .catch((error) => console.error("Error fetching category data!", error));
    axios
      .get("/api/total-sales")
      .then((response) => setTotalSales(response.data.total))
      .catch((error) => console.error("Error fetching total sales data!", error));
  }, []);

  // Function to extract data from staff users
  const extractStaffData = () => {
    return staffUsers.map((user) => ({
      name: user.name,
      email: user.email,
      loggedIn: user.logged_in_at ? new Date(user.logged_in_at).toLocaleString() : "N/A",
      loggedOut: user.logged_out_at ? new Date(user.logged_out_at).toLocaleString() : "N/A",
      status:
        user.status ||
        (user.logged_out_at
          ? "Logged Out"
          : user.logged_in_at
          ? "Logged In"
          : "Never Logged In"),
      dateCreated: new Date(user.created_at).toLocaleString("en-US", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
        hour: "2-digit",
        minute: "2-digit",
        hour12: true,
      }),
    }));
  };

  const handleExportStaffData = () => {
    const csvContent =
      "data:text/csv;charset=utf-8," +
      ["Name,Email,Status,Date Created"]
        .concat(
          staffUsers.map(
            (user) =>
              `${user.name},${user.email},${user.status},${user.dateCreated}`
          )
        )
        .join("\n");
    const encodedUri = encodeURI(csvContent);
    const link = document.createElement("a");
    link.setAttribute("href", encodedUri);
    link.setAttribute("download", "staff_users.csv");
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  // Get formatted staff data
  const staffData = extractStaffData();
  const productSalesOptions = {
    chart: {
      type: "bar",
      toolbar: { show: false },
    },
    plotOptions: {
      bar: {
        horizontal: false,
        columnWidth: "50%", // Adjust bar width
      },
    },
    xaxis: {
      categories: productSalesData.map((data) => data.product_name),
      labels: {
        style: { colors: "#666" },
      },
    },
    yaxis: {
      labels: {
        style: { colors: "#666" },
        formatter: (value) => `â‚± ${value.toLocaleString()}`, // Format as currency
      },
    },
    grid: {
      show: true,
      borderColor: "rgba(0,0,0,0.1)",
      strokeDashArray: 2, // Thinner horizontal dashed lines
      xaxis: { lines: { show: false } }, // Remove vertical lines
    },
    tooltip: {
      theme: "dark",
      y: {
        formatter: (value) => `â‚± ${value.toLocaleString()}`, // Format tooltip values
      },
    },
  };

  const productSalesSeries = [
    {
      name: "Total Sales",
      data: productSalesData.map((data) => data.total_sales),
    },
  ];

  const foreColor = document.documentElement.classList.contains('dark') ? '#fff' : '#000';
  const paymentOptions = {
    chart: {
      foreColor: foreColor,
    },
    labels: [
      `Cash (${paymentData.cash.count}, â‚±${paymentData.cash.total.toLocaleString()})`,
      `Gcash (${paymentData.gcash.count}, â‚±${paymentData.gcash.total.toLocaleString()})`,
      `Foodpanda (${paymentData.foodpanda.count}, â‚±${paymentData.foodpanda.total.toLocaleString()})`,
      `Grabfood (${paymentData.grabfood.count}, â‚±${paymentData.grabfood.total.toLocaleString()})`,
    ],
    colors: ["#008FFB", "#00E396", "#FEB019", "#FF4560"],
    tooltip: {
      y: {
        formatter: (value, opts) => {
          const counts = [
            paymentData.cash.count,
            paymentData.gcash.count,
            paymentData.foodpanda.count,
            paymentData.grabfood.count,
          ];
          const totals = [
            paymentData.cash.total,
            paymentData.gcash.total,
            paymentData.foodpanda.total,
            paymentData.grabfood.total,
          ];
          return `${value.toFixed(1)}% (${counts[opts.seriesIndex]} orders, â‚±${totals[opts.seriesIndex].toLocaleString()})`;
        },
      },
    },
  };

  const renderDateFilter = (filterDate, setFilterDate) => {
    const startYear = 2024; // Start year
    const endYear = 2034; // End year
    const yearsRange = Array.from({ length: endYear - startYear + 1 }, (_, i) => startYear + i);

    return (
      <div className="flex items-center space-x-2">
        <select
          name="month"
          value={filterDate.month}
          onChange={handleDateChange(setFilterDate)}
          className="px-2 py-1 rounded bg-gray-300 dark:bg-gray-700 text-black dark:text-white"
        >
          {Array.from({ length: 12 }, (_, i) => (
            <option key={i + 1} value={i + 1}>
              {dayjs().month(i).format("MMMM")}
            </option>
          ))}
        </select>
        <select
          name="year"
          value={filterDate.year}
          onChange={handleDateChange(setFilterDate)}
          className="px-2 py-1 rounded bg-gray-300 dark:bg-gray-700 text-black dark:text-white"
        >
          {yearsRange.map((year) => (
            <option key={year} value={year}>
              {year}
            </option>
          ))}
        </select>
      </div>
    );
  };

  return (
    <AppLayout breadcrumbs={breadcrumbs}>
      <Head title="Dashboard" />
      <div className="flex flex-col gap-4 rounded-xl p-4">
        {/* Overview Cards */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {[
            { title: "Total Sales", value: `â‚± ${todayFinancials.totalSales.toLocaleString()}`, icon: PhilippinePeso, color: "text-purple-500" },
            { title: "Total Expense", value: `â‚± ${todayFinancials.totalExpense.toLocaleString()}`, icon: Receipt, color: "text-purple-500" },
            { title: "Total Income", value: `â‚± ${todayFinancials.totalCash.toLocaleString()}`, icon: Calculator, color: "text-purple-500" },
            { title: "Total Deposited", value: `â‚± ${todayFinancials.totalDeposited.toLocaleString()}`, icon: BanknoteIcon, color: "text-purple-500" },
          ].map(({ title, value, icon: Icon, color }, index) => (
            <div
              key={index}
              className="p-4 bg-gray-300 dark:bg-gray-800 rounded-xl text-black dark:text-white flex flex-col"
            >
              <h3 className="text-lg font-semibold flex items-center space-x-2">
                {Icon && <Icon className={`w-4 h-4 ${color}`} />}
                <span className="text-[16px]">{title}</span>
              </h3>
              <p className="text-sm font-medium mt-2">{value}</p>
            </div>
          ))}
        </div>
        
        {/* Payment Methods Overview Cards */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          {[
          { title: "Cash Sales", value: `â‚± ${todayFinancials.cashSales.toLocaleString()}`, icon: Wallet, color: "text-purple-500" },
          { 
            title: "GCash Sales", 
            value: `â‚± ${todayFinancials.gcashSales.toLocaleString()}`, 
            icon: () => (
          <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="30" height="30" viewBox="0 0 100 100" fill="#3B82F6"><path fill="#78a1d1" d="M82.189,26.498c-0.547,0-1.089,0.13-1.59,0.386c-1.718,0.879-2.401,2.992-1.522,4.71	C82.012,37.332,83.5,43.525,83.5,50c0,6.477-1.487,12.669-4.422,18.406c-0.427,0.833-0.503,1.781-0.216,2.67	c0.288,0.89,0.904,1.614,1.736,2.04c0.5,0.256,1.036,0.385,1.592,0.385c1.322,0,2.518-0.73,3.118-1.907	C88.754,64.863,90.5,57.598,90.5,50c0-7.595-1.746-14.86-5.19-21.594c-0.426-0.833-1.15-1.449-2.041-1.737	C82.915,26.555,82.551,26.498,82.189,26.498z"></path><path fill="#4a5397" d="M43,85C23.701,85,8,69.299,8,50s15.701-35,35-35c7.843,0,15.262,2.543,21.454,7.355	c1.744,1.355,2.06,3.869,0.704,5.613c-1.354,1.744-3.868,2.061-5.612,0.705C54.771,24.961,49.049,23,43,23	c-14.888,0-27,12.112-27,27s12.112,27,27,27c6.049,0,11.771-1.961,16.546-5.672c1.745-1.357,4.258-1.04,5.612,0.704	c1.355,1.745,1.041,4.257-0.704,5.613C58.262,82.457,50.844,85,43,85z"></path><path fill="#78a1d1" d="M71.142,33.498c-0.501,0-1.001,0.109-1.47,0.326c-1.751,0.811-2.517,2.896-1.706,4.647	C69.647,42.104,70.5,45.983,70.5,50s-0.853,7.896-2.534,11.53c-0.811,1.751-0.045,3.836,1.706,4.647	c0.466,0.215,0.959,0.324,1.467,0.324c1.36,0,2.608-0.797,3.179-2.031C76.43,59.908,77.5,55.04,77.5,50s-1.07-9.908-3.183-14.47	c-0.392-0.849-1.091-1.493-1.968-1.815C71.956,33.569,71.548,33.498,71.142,33.498z"></path><path fill="#e3e2e3" d="M43,29.5c-11.304,0-20.5,9.196-20.5,20.5S31.696,70.5,43,70.5S63.5,61.304,63.5,50	c0-1.93-1.57-3.5-3.5-3.5H48c-1.93,0-3.5,1.57-3.5,3.5s1.57,3.5,3.5,3.5h8.058l-0.212,0.654C54.034,59.744,48.872,63.5,43,63.5	c-7.444,0-13.5-6.056-13.5-13.5S35.556,36.5,43,36.5c2.86,0,5.604,0.899,7.938,2.601c0.756,0.551,1.681,0.774,2.603,0.631	c0.924-0.144,1.736-0.64,2.287-1.395c1.138-1.56,0.795-3.753-0.765-4.891C51.524,30.864,47.354,29.5,43,29.5z"></path><path fill="#1f212b" d="M82.19,74.001c-0.637,0-1.249-0.148-1.819-0.44c-0.95-0.486-1.655-1.314-1.984-2.331	c-0.328-1.018-0.241-2.102,0.246-3.052C81.53,62.514,83,56.398,83,50c0-6.395-1.47-12.511-4.368-18.179	c-1.004-1.963-0.224-4.378,1.74-5.383c0.95-0.484,2.044-0.571,3.051-0.245c1.017,0.328,1.846,1.033,2.332,1.985	C89.235,34.983,91,42.325,91,50c0,7.679-1.765,15.021-5.246,21.822C85.067,73.166,83.702,74.001,82.19,74.001z M82.189,26.998	c-0.474,0-0.933,0.111-1.362,0.331c-1.473,0.753-2.058,2.564-1.305,4.037C82.493,37.176,84,43.445,84,50	c0,6.558-1.506,12.827-4.477,18.633c-0.366,0.713-0.432,1.526-0.186,2.29c0.247,0.762,0.775,1.383,1.488,1.748	c0.429,0.219,0.888,0.331,1.364,0.331c1.134,0,2.158-0.626,2.673-1.634C88.271,64.707,90,57.519,90,50	c0-7.516-1.728-14.704-5.136-21.366c-0.365-0.713-0.986-1.242-1.749-1.489C82.813,27.047,82.503,26.998,82.189,26.998z"></path><path fill="#1f212b" d="M43,86C23.149,86,7,69.851,7,50s16.149-36,36-36c8.067,0,15.698,2.616,22.067,7.565	c1.055,0.819,1.728,2,1.894,3.326s-0.193,2.636-1.013,3.69c-0.819,1.054-2,1.727-3.325,1.893c-1.327,0.167-2.636-0.194-3.691-1.013	C54.334,25.889,48.825,24,43,24c-14.337,0-26,11.664-26,26s11.663,26,26,26c5.825,0,11.334-1.889,15.933-5.462	c1.055-0.819,2.366-1.181,3.69-1.014c1.325,0.167,2.506,0.839,3.325,1.894s1.179,2.365,1.013,3.69	c-0.166,1.325-0.839,2.506-1.894,3.326C58.698,83.384,51.067,86,43,86z M43,16C24.252,16,9,31.252,9,50s15.252,34,34,34	c7.619,0,14.825-2.471,20.841-7.146c0.633-0.492,1.036-1.2,1.136-1.995c0.1-0.795-0.116-1.582-0.608-2.214	c-0.491-0.633-1.199-1.037-1.994-1.136c-0.793-0.1-1.582,0.116-2.214,0.608C55.207,75.966,49.273,78,43,78	c-15.439,0-28-12.561-28-28s12.561-28,28-28c6.273,0,12.207,2.034,17.159,5.883c0.634,0.492,1.421,0.708,2.214,0.607	c0.796-0.1,1.504-0.503,1.995-1.136c0.492-0.633,0.708-1.419,0.608-2.214c-0.1-0.795-0.503-1.504-1.136-1.996	C57.825,18.471,50.618,16,43,16z"></path><path fill="#1f212b" d="M71.139,67.001c-0.58,0-1.144-0.125-1.676-0.37c-2.002-0.927-2.877-3.31-1.951-5.311	C69.163,57.753,70,53.944,70,50s-0.837-7.753-2.488-11.32c-0.926-2.001-0.051-4.384,1.95-5.311c0.965-0.447,2.063-0.491,3.061-0.125	c1.003,0.369,1.802,1.105,2.249,2.075C76.914,39.947,78,44.886,78,50s-1.086,10.053-3.229,14.68	C74.119,66.09,72.693,67.001,71.139,67.001z M71.142,33.998c-0.435,0-0.858,0.094-1.26,0.279c-1.501,0.695-2.157,2.482-1.462,3.983	C70.132,41.959,71,45.91,71,50s-0.868,8.041-2.58,11.74c-0.695,1.501-0.039,3.288,1.462,3.983c1.472,0.678,3.312-0.012,3.981-1.463	C75.944,59.766,77,54.968,77,50s-1.056-9.766-3.137-14.26c-0.335-0.727-0.935-1.28-1.687-1.556	C71.842,34.06,71.493,33.998,71.142,33.998z"></path><path fill="#1f212b" d="M43,71c-11.579,0-21-9.42-21-21s9.421-21,21-21c4.46,0,8.733,1.397,12.357,4.042	c0.862,0.629,1.428,1.557,1.593,2.614s-0.09,2.114-0.719,2.976c-0.63,0.864-1.559,1.43-2.614,1.595	c-1.059,0.165-2.112-0.092-2.975-0.721C48.396,37.866,45.753,37,43,37c-7.168,0-13,5.832-13,13s5.832,13,13,13	c5.654,0,10.626-3.617,12.37-9H48c-2.206,0-4-1.794-4-4s1.794-4,4-4h12c2.206,0,4,1.794,4,4C64,61.58,54.579,71,43,71z M43,30	c-11.028,0-20,8.972-20,20s8.972,20,20,20s20-8.972,20-20c0-1.654-1.346-3-3-3H48c-1.654,0-3,1.346-3,3s1.346,3,3,3h7.37	c0.319,0,0.622,0.154,0.81,0.413c0.188,0.259,0.24,0.594,0.142,0.897C54.442,60.105,49.089,64,43,64c-7.72,0-14-6.28-14-14	s6.28-14,14-14c2.967,0,5.813,0.933,8.232,2.697c0.646,0.472,1.439,0.667,2.23,0.541c0.792-0.124,1.488-0.548,1.96-1.195	c0.976-1.337,0.682-3.218-0.655-4.193C51.316,31.331,47.247,30,43,30z"></path><path fill="#1f212b" d="M43,60c-0.487,0-1.004-0.044-1.579-0.136c-0.272-0.043-0.458-0.3-0.415-0.572	c0.044-0.273,0.293-0.463,0.573-0.415C42.101,58.959,42.565,59,43,59c0.793,0,1.589-0.108,2.367-0.322	c0.271-0.072,0.541,0.083,0.615,0.35c0.073,0.266-0.084,0.542-0.35,0.614C44.768,59.88,43.882,60,43,60z"></path><path fill="#1f212b" d="M38.5,58.867c-0.08,0-0.162-0.019-0.237-0.06C35.017,57.058,33,53.683,33,50c0-5.514,4.486-10,10-10	c2.083,0,4.085,0.642,5.79,1.856c0.225,0.16,0.277,0.472,0.117,0.697c-0.16,0.226-0.473,0.278-0.697,0.117	C46.676,41.578,44.874,41,43,41c-4.963,0-9,4.038-9,9c0,3.314,1.815,6.352,4.737,7.927c0.243,0.131,0.334,0.434,0.203,0.677	C38.85,58.772,38.678,58.867,38.5,58.867z"></path><path fill="#1f212b" d="M47.5,58.858c-0.177,0-0.349-0.095-0.439-0.262c-0.132-0.243-0.042-0.546,0.201-0.678	c0.44-0.239,0.86-0.513,1.248-0.814c0.215-0.17,0.53-0.131,0.701,0.088c0.17,0.218,0.13,0.532-0.088,0.702	c-0.431,0.334-0.896,0.638-1.385,0.903C47.662,58.839,47.581,58.858,47.5,58.858z"></path>
</svg>
            ), 
            color: "text-purple-500" 
          },
          { 
            title: "GrabFood Sales", 
            value: `â‚± ${todayFinancials.grabfoodSales.toLocaleString()}`, 
            icon: () => (
          <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="35" height="35" viewBox="0 0 100 100" fill="green">    
          <path fill="#fefdef" d="M70.645,82h-41.29C23.084,82,18,76.916,18,70.645v-41.29C18,23.084,23.084,18,29.355,18h41.29	C76.916,18,82,23.084,82,29.355v41.29C82,76.916,76.916,82,70.645,82z"></path><path fill="#1f212b" d="M70.646,83H29.354C22.542,83,17,77.458,17,70.646V29.354C17,22.542,22.542,17,29.354,17h41.291	C77.458,17,83,22.542,83,29.354v41.291C83,77.458,77.458,83,70.646,83z M29.354,19C23.645,19,19,23.645,19,29.354v41.291	C19,76.355,23.645,81,29.354,81h41.291C76.355,81,81,76.355,81,70.646V29.354C81,23.645,76.355,19,70.646,19H29.354z"></path><path fill="#1f212b" d="M69.5,78h-39c-4.687,0-8.5-3.813-8.5-8.5v-39c0-4.687,3.813-8.5,8.5-8.5h37	c0.276,0,0.5,0.224,0.5,0.5S67.776,23,67.5,23h-37c-4.136,0-7.5,3.364-7.5,7.5v39c0,4.136,3.364,7.5,7.5,7.5h39	c4.136,0,7.5-3.364,7.5-7.5v-23c0-0.276,0.224-0.5,0.5-0.5s0.5,0.224,0.5,0.5v23C78,74.187,74.187,78,69.5,78z"></path><path fill="#1f212b" d="M77.5,45c-0.276,0-0.5-0.224-0.5-0.5v-8c0-0.276,0.224-0.5,0.5-0.5s0.5,0.224,0.5,0.5v8	C78,44.776,77.776,45,77.5,45z"></path><path fill="#1f212b" d="M77.5,35c-0.276,0-0.5-0.224-0.5-0.5v-1c0-0.276,0.224-0.5,0.5-0.5s0.5,0.224,0.5,0.5v1	C78,34.776,77.776,35,77.5,35z"></path><path fill="#70b570" d="M108.773,930.318 c-3.703-0.329-6.944-1.796-9.406-4.257c-2.325-2.324-3.751-5.274-4.236-8.759c-0.119-0.857-0.146-2.869-0.05-3.773 c0.311-2.932,1.379-5.552,3.182-7.81c0.486-0.608,1.496-1.64,2.077-2.122c3.082-2.555,6.972-3.799,11.182-3.577 c1.986,0.105,3.35,0.348,4.877,0.872c1.059,0.363,2.582,1.132,3.051,1.541l0.119,0.103l-0.013,1.155l-0.013,1.155l-0.503-0.309 c-2.305-1.419-5.23-2.17-8.442-2.168c-2.723,0.002-5.236,0.731-7.376,2.141c-2.201,1.451-3.86,3.498-4.831,5.964 c-1.315,3.338-1.111,7.418,0.534,10.711c1.876,3.754,5.331,6.169,9.618,6.723c1.261,0.163,3.122,0.089,4.443-0.177 c4.324-0.87,7.037-3.827,7.615-8.3c0.06-0.467,0.082-1.029,0.085-2.25l0.005-1.627l-5.109-0.012l-5.109-0.012v-1.148v-1.148 h6.246h6.246l0,2.07c0,2.334-0.051,3.556-0.189,4.533c-0.416,2.95-1.514,5.299-3.327,7.111c-1.837,1.837-4.188,2.915-7.205,3.303 C111.538,930.34,109.478,930.38,108.773,930.318L108.773,930.318z" transform="matrix(.52325 0 0 .52325 -23.653 -427.84)"></path><path fill="#70b570" d="M167.043,902.901v-5.031h1.173 h1.173v4.252v4.252l-0.203,0.091c-0.419,0.188-1.013,0.594-2.083,1.421C167.055,907.923,167.043,906.918,167.043,902.901 L167.043,902.901z" transform="matrix(.52325 0 0 .52325 -23.653 -427.84)"></path><path fill="#70b570" d="M163.501,904.723v-6.854h1.173 h1.173v5.485v5.485l-0.367,0.39c-0.375,0.399-1.05,1.192-1.594,1.873c-0.168,0.211-0.323,0.403-0.345,0.428 C163.519,911.556,163.501,908.493,163.501,904.723z" transform="matrix(.52325 0 0 .52325 -23.653 -427.84)"></path><path fill="#70b570" d="M109.395,926.748 c-2.945-0.232-5.425-1.368-7.377-3.381c-0.573-0.591-0.904-1.002-1.345-1.671c-1.633-2.478-2.268-5.714-1.712-8.723 c0.713-3.858,3.376-7.061,7.105-8.546c0.948-0.378,2.118-0.656,3.23-0.769c0.722-0.073,2.659-0.032,3.424,0.072 c2.464,0.337,4.663,1.098,6.425,2.224l0.419,0.267l0,1.135c0,1.034-0.007,1.139-0.084,1.18c-0.066,0.035-0.214-0.037-0.682-0.334 c-1.846-1.17-3.811-1.853-6.126-2.131c-0.882-0.106-2.788-0.119-3.446-0.025c-4.23,0.609-7.244,3.651-7.779,7.856 c-0.146,1.144-0.047,2.758,0.238,3.877c0.636,2.498,2.174,4.53,4.233,5.592c1.397,0.721,2.625,1.012,4.265,1.012 c2.296,0,4.143-0.653,5.409-1.912c0.821-0.816,1.301-1.806,1.41-2.91l0.034-0.347h-3.283h-3.283v-1.22v-1.22h4.499h4.499v0.976 c0,1.506-0.12,2.4-0.458,3.411c-0.685,2.049-2.139,3.675-4.136,4.628c-1.299,0.62-2.681,0.921-4.396,0.959 C110.014,926.759,109.526,926.759,109.395,926.748L109.395,926.748z" transform="matrix(.52325 0 0 .52325 -23.653 -427.84)"></path><path fill="#70b570" d="M174.543,926.775 c-1.861-0.165-3.499-0.986-4.897-2.454c-1.003-1.052-1.713-2.308-2.022-3.574c-0.179-0.733-0.235-0.59,0.787-1.999 c0.499-0.687,0.921-1.251,0.938-1.253c0.017-0.002,0.045,0.229,0.062,0.512c0.043,0.716,0.108,1.154,0.252,1.711 c0.639,2.471,2.433,4.257,4.672,4.649c0.594,0.104,1.615,0.066,2.186-0.081c2.061-0.531,3.432-2.09,3.956-4.496 c0.126-0.581,0.127-2.288,0.001-2.861c-0.256-1.166-0.757-2.151-1.48-2.913c-1.034-1.089-2.39-1.645-4.008-1.645 c-2.077,0-3.587,0.842-5.58,3.112c-1.948,2.219-5.183,6.33-6.81,8.655l-0.581,0.83v-1.931v-1.931l0.827-1.125 c0.455-0.619,1.252-1.674,1.772-2.345c0.519-0.671,1.24-1.608,1.602-2.082c1.661-2.176,2.732-3.268,4.094-4.172 c2.808-1.864,6.504-1.91,9.184-0.117c2.735,1.831,4.05,5.411,3.316,9.033c-0.592,2.922-2.463,5.176-5.052,6.087 c-0.56,0.197-1.204,0.33-1.888,0.389C175.242,926.829,175.159,926.829,174.543,926.775L174.543,926.775z" transform="matrix(.52325 0 0 .52325 -23.653 -427.84)"></path><path fill="#70b570" d="M154.934,923.661 c0-5.206-0.01-6.105-0.074-6.536c-0.234-1.578-0.963-2.892-2.059-3.715c-0.711-0.533-1.508-0.865-2.454-1.02 c-0.678-0.112-1.691-0.068-2.329,0.1c-2.128,0.562-3.658,2.295-4.12,4.667c-0.132,0.677-0.12,1.954,0.023,2.632 c0.474,2.233,1.89,3.845,3.881,4.419c1.753,0.505,4.168,0.127,5.66-0.886l0.276-0.187l-0.013,1.234l-0.013,1.234l-0.479,0.25 c-1.211,0.633-3.109,1.037-4.451,0.948c-2.57-0.172-4.638-1.338-6.014-3.392c-1.465-2.187-1.839-5.36-0.948-8.036 c1.177-3.536,4.478-5.695,8.242-5.393c2.041,0.164,3.574,0.849,4.92,2.198c1.243,1.247,1.91,2.593,2.23,4.502 c0.077,0.458,0.086,1.059,0.101,6.76l0.017,6.258h-1.199h-1.199V923.661z" transform="matrix(.52325 0 0 .52325 -23.653 -427.84)"></path><path fill="#70b570" d="M128.085,923.511 c0.001-6.345,0.021-7.195,0.189-8.022c0.433-2.125,1.694-3.815,3.537-4.742c0.436-0.219,1.343-0.509,1.873-0.598 c1.598-0.269,3.258-0.026,4.437,0.649l0.249,0.143l-0.197,0.321c-0.109,0.176-0.346,0.628-0.528,1.003 c-0.182,0.375-0.334,0.682-0.339,0.682s-0.213-0.073-0.463-0.162c-1.07-0.382-2.048-0.444-3.048-0.193 c-0.936,0.235-1.789,0.788-2.341,1.518c-0.308,0.407-0.664,1.159-0.821,1.732l-0.131,0.479l-0.014,6.689l-0.014,6.689h-1.195 h-1.195L128.085,923.511z" transform="matrix(.52325 0 0 .52325 -23.653 -427.84)"></path><path fill="#70b570" d="M124.591,923.104 c0-6.588,0.011-7.121,0.172-8.1c0.496-3.018,2.076-5.482,4.434-6.913c2.241-1.361,5.215-1.826,8.077-1.265 c1.019,0.2,2.286,0.693,3.068,1.193l0.316,0.202l-0.56,0.555c-0.308,0.305-0.657,0.67-0.776,0.81l-0.216,0.255l-0.282-0.142 c-0.94-0.474-2.532-0.823-3.756-0.823c-3.85,0-6.853,2.235-7.794,5.802c-0.323,1.225-0.308,0.845-0.326,8.281l-0.016,6.736 h-1.171h-1.171L124.591,923.104z" transform="matrix(.52325 0 0 .52325 -23.653 -427.84)"></path><path fill="#70b570" d="M174.174,930.337 c-3.593-0.327-6.569-2.052-8.398-4.866c-0.289-0.444-0.79-1.453-0.889-1.789l-0.059-0.199l0.832-1.132l0.832-1.132l0.042,0.158 c0.538,2.023,1.719,3.744,3.384,4.931c0.518,0.369,1.458,0.869,2.081,1.105c1.564,0.594,3.297,0.737,4.985,0.411 c1.098-0.212,2.402-0.77,3.315-1.419c0.562-0.399,1.603-1.433,1.982-1.967c0.926-1.307,1.536-2.859,1.782-4.538 c0.113-0.769,0.114-2.321,0.002-3.083c-0.389-2.657-1.599-4.795-3.55-6.275c-1.642-1.245-3.956-1.892-6.163-1.721 c-3.342,0.258-5.644,1.778-8.957,5.912c-0.34,0.424-1.231,1.59-1.981,2.59s-1.371,1.828-1.38,1.839 c-0.009,0.011-0.017-0.765-0.017-1.724v-1.744l0.803-1.124c1.701-2.382,2.437-3.292,3.599-4.45 c1.21-1.206,2.178-1.92,3.472-2.561c1.087-0.539,2.131-0.862,3.422-1.061c0.774-0.119,2.672-0.119,3.446,0 c2.638,0.406,4.738,1.475,6.509,3.315c1.735,1.802,2.773,4.038,3.166,6.816c0.086,0.61,0.086,2.833,0,3.446 c-0.279,1.986-0.923,3.768-1.894,5.241c-1.802,2.733-4.427,4.422-7.662,4.93C176.416,930.321,174.637,930.38,174.174,930.337 L174.174,930.337z" transform="matrix(.52325 0 0 .52325 -23.653 -427.84)"></path><path fill="#70b570" d="M148.186,930.312 c-5.187-0.475-9.191-4.121-10.19-9.278c-0.189-0.977-0.22-1.343-0.22-2.632c0-1.579,0.106-2.394,0.481-3.686 c0.981-3.383,3.473-6.187,6.65-7.482c1.518-0.619,2.835-0.868,4.571-0.864c1.683,0.004,2.923,0.222,4.331,0.762 c1.503,0.576,2.717,1.377,3.857,2.543c1.658,1.697,2.646,3.739,3.073,6.355c0.1,0.613,0.102,0.757,0.118,7.146l0.016,6.521 h-1.198h-1.198l0-5.995c0-3.722-0.019-6.212-0.05-6.569c-0.204-2.366-1.168-4.453-2.75-5.95c-1.775-1.68-4.376-2.566-6.927-2.361 c-4.383,0.353-7.641,3.359-8.411,7.76c-0.215,1.228-0.177,2.867,0.097,4.225c0.198,0.98,0.699,2.27,1.193,3.072 c1.033,1.678,2.553,2.903,4.42,3.561c1.599,0.564,3.43,0.706,4.989,0.389c0.891-0.182,1.951-0.589,2.482-0.955l0.219-0.151v1.189 v1.189l-0.275,0.182c-0.783,0.517-1.935,0.895-3.147,1.033C149.815,930.374,148.838,930.372,148.186,930.312L148.186,930.312z" transform="matrix(.52325 0 0 .52325 -23.653 -427.84)"></path>
          </svg>
            ), 
            color: "text-purple-500" 
          },
          { 
            title: "FoodPanda Sales", 
            value: `â‚± ${todayFinancials.foodpandaSales.toLocaleString()}`, 
            icon: () => (
          <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="30" height="30" viewBox="0 0 100 100">    
          <path fill="#ee5490" d="M86,49.031c0-0.232-0.03-0.456-0.035-0.686c-0.019-0.746-0.05-1.488-0.112-2.222 c-0.05-0.626-0.123-1.243-0.205-1.86c-0.042-0.303-0.089-0.604-0.138-0.904c-0.817-5.146-2.695-9.934-5.448-14.109 c1.987-1.606,3.005-4.148,3.005-6.955c0-5.291-4.263-9.262-9.604-9.262c-3.214,0-5.968,1.387-7.621,3.71 c-4.786-2.353-10.149-3.71-15.842-3.71c-5.69,0-11.051,1.356-15.835,3.707c-1.667-2.329-4.404-3.706-7.626-3.706 c-5.222-0.056-9.511,4.08-9.605,9.262c0.044,2.623,1.131,5.113,3.008,6.95c-2.765,4.192-4.648,9-5.46,14.17 c-0.06,0.361-0.117,0.722-0.166,1.086c-0.063,0.497-0.12,0.994-0.162,1.497c-0.076,0.852-0.118,1.708-0.13,2.568 C14.022,48.721,14,48.873,14,49.031c0,0.038,0.006,0.074,0.006,0.112c0,0.049-0.005,0.098-0.005,0.148 c0.005,18.152,13.652,33.106,31.312,35.4c1.538,0.2,3.094,0.339,4.687,0.339c0,0,0,0,0,0l0,0c0.071,0,0.14-0.01,0.211-0.011 c1.425-0.008,2.824-0.118,4.205-0.288C72.206,82.56,85.99,67.543,86,49.302c0-0.053-0.005-0.104-0.006-0.157 C85.994,49.106,86,49.069,86,49.031z"></path><path fill="#1f212b" d="M50,86.031c-1.471,0-3.001-0.11-4.816-0.349c-18.342-2.381-32.178-18.025-32.183-36.391 c0-0.017,0.003-0.107,0.004-0.124C13.003,49.121,13,49.077,13,49.031c0-0.107,0.007-0.213,0.015-0.317l0.009-0.162 c0.013-0.898,0.058-1.788,0.134-2.645c0.043-0.511,0.102-1.021,0.166-1.532c0.051-0.382,0.11-0.752,0.172-1.124 c0.785-5.001,2.528-9.672,5.181-13.889c-1.73-1.96-2.698-4.434-2.742-7.052c0.103-5.707,4.802-10.279,10.5-10.279 c0.038,0,0.077,0.001,0.115,0.001c3.171,0,6.009,1.25,7.907,3.458c4.93-2.296,10.155-3.459,15.544-3.459 c5.391,0,10.618,1.164,15.55,3.462c1.892-2.21,4.729-3.461,7.913-3.461c5.946,0,10.604,4.508,10.604,10.262 c0,2.878-0.954,5.374-2.705,7.129c2.621,4.185,4.348,8.815,5.135,13.78c0.051,0.301,0.099,0.61,0.142,0.922 c0.085,0.64,0.159,1.274,0.212,1.917c0.056,0.666,0.092,1.391,0.114,2.278c0.002,0.091,0.009,0.179,0.015,0.266 C86.99,48.733,87,48.881,87,49.031c0,0.026-0.004,0.108-0.006,0.135C86.995,49.185,87,49.283,87,49.302 c-0.01,18.505-13.966,34.164-32.462,36.424c-1.559,0.191-2.973,0.287-4.32,0.295C50.123,86.027,50.063,86.031,50,86.031z M26.444,14.031c-4.624,0-8.428,3.695-8.511,8.281c0.039,2.326,1.001,4.546,2.707,6.217c0.343,0.335,0.399,0.866,0.136,1.266 c-2.737,4.149-4.522,8.784-5.307,13.774c-0.06,0.358-0.115,0.709-0.163,1.063c-0.06,0.476-0.116,0.957-0.157,1.446 c-0.072,0.813-0.114,1.651-0.126,2.499c-0.001,0.094-0.008,0.188-0.015,0.281C15.005,48.916,15,48.973,15,49.031 c0.003,0.022,0.006,0.066,0.006,0.112c0,0.017-0.003,0.107-0.004,0.124c0.004,17.388,13.091,32.18,30.44,34.433 c1.729,0.226,3.177,0.331,4.558,0.331l0.198-0.011c1.278-0.007,2.616-0.099,4.098-0.279C71.791,81.603,84.99,66.797,85,49.301 l-0.006-0.156c0-0.025,0.004-0.104,0.006-0.132c-0.001-0.096-0.009-0.189-0.016-0.283c-0.009-0.12-0.017-0.241-0.02-0.363 c-0.018-0.723-0.048-1.445-0.107-2.159c-0.05-0.612-0.12-1.212-0.2-1.813c-0.04-0.288-0.086-0.58-0.134-0.871 c-0.789-4.976-2.571-9.591-5.296-13.723c-0.283-0.43-0.194-1.005,0.206-1.328c1.698-1.374,2.634-3.568,2.634-6.179 c0-4.633-3.779-8.262-8.604-8.262c-2.838,0-5.318,1.199-6.807,3.289c-0.284,0.398-0.814,0.533-1.256,0.317 c-4.868-2.394-10.05-3.607-15.4-3.607c-5.348,0-10.527,1.213-15.394,3.604c-0.441,0.217-0.97,0.081-1.255-0.315 C31.84,15.207,29.276,14.003,26.444,14.031z"></path><circle cx="50" cy="49.031" r="32.4" fill="#fff"></circle><path fill="#ee5490" d="M49.995,66.531c4.915,0,9.005-3.588,9.005-8H41c0,4.412,3.812,8,9.005,8H49.995z"></path><path fill="#1f212b" d="M50.005,67.042c-0.004,0-0.006,0-0.01,0c-0.001,0-0.002,0-0.003,0 c-5.329-0.006-9.503-3.742-9.503-8.511c0-0.282,0.229-0.511,0.511-0.511h18c0.282,0,0.511,0.229,0.511,0.511 c0,4.689-4.262,8.505-9.503,8.511C50.007,67.042,50.006,67.042,50.005,67.042z M41.529,59.042c0.288,3.951,3.904,6.977,8.471,6.979 c4.486-0.002,8.171-3.088,8.47-6.979H41.529z"></path><path fill="#ee5490" d="M49.994,55.896c0.544,0.261,6.148-1.854,6.148-4.51c0-1.594-4.535-1.854-6.148-1.854 c-1.613,0-6.128,0.261-6.128,1.854c-0.262,2.656,5.604,4.771,6.138,4.51H49.994z"></path><path fill="#1f212b" d="M50.128,56.409c-0.048,0-0.094-0.002-0.136-0.007c-0.907,0.094-3.18-0.865-4.557-1.822 c-1.461-1.017-2.176-2.138-2.067-3.243c-0.002-2.136,5.071-2.306,6.626-2.306c1.56,0,6.647,0.17,6.647,2.354 c0,1.516-1.427,2.732-2.624,3.486C52.875,55.592,51.035,56.409,50.128,56.409z M49.994,50.031c-3.051,0-5.628,0.62-5.628,1.354 c-0.051,0.544,0.198,1.074,0.739,1.626c1.425,1.454,4.19,2.404,4.74,2.406c0.047-0.015,0.097-0.022,0.148-0.022h0.01 c0.052,0,0.102,0.008,0.148,0.022c0.523-0.004,3.027-0.909,4.488-2.263c0.664-0.615,1.001-1.211,1.001-1.77 C55.642,50.651,53.056,50.031,49.994,50.031z"></path><path fill="#ee5490" d="M75.695,50.281c0.73-1.371,1.283-2.977,1.511-4.785c0.412-5.212-2.065-10.218-6.4-12.931	c-3.195-2.193-10.129-3.295-12.799,0.281c0,0-3.467,3.846,0,7.692c3.467,3.846,5.866,7.713,6.672,10.738	c0.806,3.295,2.127,4.397,4.535,4.397c1.381,0,3.543-1.264,5.287-3.534"></path><path fill="#fff" d="M64.5,42.52c-1.146,0-2-0.86-2-1.989s0.865-2,2-2c1.135,0,2,0.86,2,2S65.635,42.52,64.5,42.52z"></path><path fill="#1f212b" d="M64.5,43.021c-1.425,0-2.5-1.07-2.5-2.489c0-1.402,1.098-2.5,2.5-2.5s2.5,1.098,2.5,2.5 C67,41.95,65.925,43.021,64.5,43.021z M64.5,39.031c-0.855,0-1.5,0.645-1.5,1.5c0,0.863,0.631,1.489,1.5,1.489s1.5-0.626,1.5-1.489 C66,39.676,65.355,39.031,64.5,39.031z"></path><path fill="#ee5490" d="M35.547,51.276c0.15-0.614,0.364-1.237,0.633-1.87c0.023-0.053,0.046-0.107,0.069-0.16"></path><path fill="#ee5490" d="M37.125,47.518c1.259-2.215,3.065-4.538,5.084-6.969c3.467-4.127,0-7.703,0-7.703	c-2.661-3.576-9.594-2.474-12.799-0.281s-6.934,6.601-6.4,12.931c0.534,6.331,5.341,10.177,8.002,10.177	c1.738,0,2.915-0.72,3.738-2.267"></path><path fill="#fff" d="M35.505,42.499c-1.143,0-2.005-0.847-2.005-1.973s0.863-1.994,2.005-1.994 c1.143,0,1.995,0.858,1.995,1.994s-0.863,1.984-1.995,1.984V42.499z"></path><path fill="#1f212b" d="M35.506,43.01h-0.5v-0.056C33.833,42.737,33,41.766,33,40.525c0-1.398,1.101-2.494,2.506-2.494 c1.422,0,2.494,1.072,2.494,2.494C38,41.941,36.928,43.01,35.506,43.01z M35.506,39.031c-0.858,0-1.506,0.643-1.506,1.494 c0,0.854,0.634,1.474,1.506,1.474H35.7c0.764-0.086,1.3-0.68,1.3-1.474C37,39.659,36.372,39.031,35.506,39.031z"></path><path fill="#1f212b" d="M27.586,72.906c-0.125,0-0.249-0.046-0.346-0.14C20.701,66.495,17.1,58.065,17.1,49.031	c0-18.142,14.759-32.9,32.9-32.9c4.976,0,9.759,1.088,14.217,3.233c0.249,0.119,0.354,0.418,0.233,0.667s-0.418,0.354-0.667,0.233	c-4.321-2.079-8.959-3.134-13.783-3.134c-17.59,0-31.9,14.311-31.9,31.9c0,8.759,3.492,16.933,9.832,23.015	c0.199,0.19,0.206,0.507,0.015,0.706C27.849,72.854,27.718,72.906,27.586,72.906z"></path><path fill="#1f212b" d="M42.125,80.964c-0.04,0-0.081-0.005-0.121-0.015c-3.516-0.881-6.847-2.336-9.901-4.323	c-0.231-0.15-0.297-0.46-0.146-0.691c0.151-0.231,0.463-0.296,0.691-0.146c2.962,1.927,6.191,3.337,9.599,4.19	c0.269,0.067,0.431,0.339,0.364,0.606C42.553,80.813,42.35,80.964,42.125,80.964z"></path><path fill="#1f212b" d="M45.126,81.565c-0.025,0-0.051-0.002-0.076-0.006c-0.383-0.059-0.764-0.123-1.143-0.194	c-0.271-0.051-0.45-0.313-0.398-0.584c0.051-0.272,0.317-0.448,0.584-0.398c0.367,0.069,0.736,0.132,1.107,0.188	c0.273,0.042,0.461,0.297,0.419,0.569C45.581,81.389,45.368,81.565,45.126,81.565z"></path><path fill="#1f212b" d="M50,81.932c-0.881,0-1.777-0.036-2.665-0.107c-0.275-0.021-0.48-0.263-0.458-0.538	s0.265-0.482,0.538-0.458c0.861,0.068,1.73,0.104,2.585,0.104c17.59,0,31.9-14.311,31.9-31.9c0-6.658-2.04-13.041-5.898-18.46	c-0.16-0.225-0.107-0.537,0.117-0.697c0.224-0.16,0.536-0.108,0.697,0.117c3.98,5.589,6.084,12.173,6.084,19.04	C82.9,67.173,68.142,81.932,50,81.932z"></path><path fill="#1f212b" d="M75.072,29.031c-0.145,0-0.288-0.063-0.387-0.183c-0.414-0.506-0.843-0.998-1.287-1.478	c-0.188-0.202-0.177-0.519,0.026-0.706c0.201-0.188,0.518-0.177,0.706,0.026c0.458,0.493,0.9,1.001,1.328,1.522	c0.175,0.214,0.144,0.529-0.069,0.704C75.296,28.994,75.184,29.031,75.072,29.031z"></path><path fill="#1f212b" d="M72.414,26.156c-0.125,0-0.249-0.046-0.346-0.139c-1.663-1.595-3.498-3.011-5.454-4.209	c-0.236-0.145-0.31-0.452-0.166-0.688c0.145-0.237,0.455-0.31,0.688-0.166c2.018,1.236,3.91,2.696,5.624,4.34	c0.199,0.191,0.206,0.508,0.016,0.707C72.677,26.104,72.546,26.156,72.414,26.156z"></path><path fill="#1f212b" d="M35.548,51.776c-0.039,0-0.078-0.005-0.118-0.015c-0.269-0.064-0.433-0.335-0.367-0.604	c0.15-0.621,0.372-1.276,0.658-1.948l0.055-0.127c0.111-0.253,0.413-0.385,0.667-0.276c0.253,0.11,0.376,0.387,0.266,0.64	L36.642,49.6c-0.266,0.624-0.47,1.227-0.608,1.795C35.979,51.623,35.773,51.776,35.548,51.776z"></path><path fill="#1f212b" d="M31.013,56.174c-3.027,0-7.962-4.241-8.501-10.635c-0.656-7.771,4.898-12.211,6.616-13.387	c3.479-2.381,10.629-3.438,13.482,0.395l0,0c0.005,0,3.69,3.908-0.019,8.323c-1.742,2.098-3.704,4.559-5.032,6.895	c-0.137,0.24-0.442,0.325-0.682,0.188c-0.24-0.137-0.324-0.441-0.188-0.682c1.366-2.404,3.362-4.908,5.134-7.041	c3.128-3.724,0.153-6.903,0.025-7.037c-2.422-3.246-9.031-2.354-12.157-0.215c-1.604,1.099-6.795,5.245-6.185,12.478	c0.531,6.288,5.236,9.719,7.505,9.719c1.542,0,2.559-0.617,3.296-2.003c0.131-0.244,0.435-0.334,0.677-0.206	c0.243,0.13,0.336,0.433,0.206,0.677C34.284,55.346,32.918,56.174,31.013,56.174z"></path><path fill="#1f212b" d="M69.214,56.174c-2.736,0-4.19-1.385-5.021-4.778c-0.78-2.927-3.172-6.766-6.558-10.522	c-3.726-4.133-0.038-8.32,0-8.362c2.835-3.799,9.982-2.739,13.453-0.357c2.966,1.856,5.144,4.788,6.114,8.243	c0.074,0.266-0.08,0.541-0.347,0.616c-0.262,0.075-0.541-0.08-0.616-0.347c-0.903-3.215-2.928-5.941-5.7-7.677	c-3.134-2.15-9.739-3.045-12.133,0.155c-0.157,0.179-3.146,3.603-0.029,7.059c3.54,3.928,5.949,7.814,6.784,10.944	c0.823,3.369,2.109,4.026,4.052,4.026c1.155,0,3.206-1.147,4.89-3.34c0.169-0.22,0.482-0.259,0.701-0.092	c0.219,0.168,0.26,0.482,0.092,0.701C73.184,54.675,70.899,56.174,69.214,56.174z"></path><path fill="#1f212b" d="M77.237,44.281c-0.267,0-0.488-0.211-0.5-0.479c-0.015-0.364-0.044-0.727-0.087-1.086	c-0.033-0.273,0.162-0.522,0.437-0.556c0.251-0.042,0.522,0.161,0.556,0.437c0.047,0.385,0.078,0.772,0.095,1.164	c0.011,0.275-0.203,0.509-0.479,0.521C77.251,44.281,77.244,44.281,77.237,44.281z"></path><path fill="#1f212b" d="M75.695,50.781c-0.08,0-0.16-0.019-0.234-0.059c-0.244-0.13-0.337-0.433-0.207-0.676	c0.761-1.431,1.251-2.982,1.456-4.612c0.035-0.274,0.288-0.474,0.559-0.434c0.274,0.034,0.468,0.284,0.434,0.559	c-0.221,1.751-0.747,3.418-1.565,4.956C76.047,50.686,75.874,50.781,75.695,50.781z"></path>
          </svg>
            ), 
            color: "text-purple-500" 
          },
          ].map(({ title, value, icon: Icon, color }, index) => (
            <div
              key={index}
              className="p-4 bg-gray-300 dark:bg-gray-800 rounded-xl text-black dark:text-white flex flex-col"
            >
              <h3 className="text-lg font-semibold flex items-center space-x-2">
                {Icon && <Icon className={`w-4 h-4 ${color}`} />}
                <span className="text-[16px]">{title}</span>
              </h3>
              <p className="text-sm font-medium mt-2">{value}</p>
            </div>
          ))}
        </div>

        {/* Staff Users Table */}
        <div className="bg-gray-200 dark:bg-gray-800 p-4 rounded-xl shadow-md w-full">
          <div className="p-4 bg-gray-300 dark:bg-gray-800 rounded-xl w-full overflow-x-auto">
            <h3 className="text-lg font-semibold text-white flex items-center space-x-2">
              <Users className="w-5 h-5 text-purple-900 dark:text-purple-500" />
              <span className="text-black dark:text-white">Staff Users</span>
            </h3>
            <button
              onClick={handleExportStaffData}
              className="mt-2 px-4 py-2 bg-purple-500 text-white rounded"
            >
              Export Data
            </button>
            {staffError ? (
              <ErrorMessage message={staffError} />
            ) : (
              <table className="w-full mt-1 min-w-[600px]">
                <thead>
                  <tr className="text-left text-black dark:text-white bg-gray-300 dark:bg-gray-800">
                    <th className="px-4 py-2">Name</th>
                    <th className="px-4 py-2">Email</th>
                    <th className="px-4 py-2">Date Created</th>
                  </tr>
                </thead>
                <tbody>
                  {staffData
                    .slice(
                      (staffPage - 1) * staffPerPage,
                      staffPage * staffPerPage
                    )
                    .map((staff, index) => (
                      <tr key={index} className="text-black dark:text-white border-b border-gray-600">
                        <td className="px-4 py-2">{staff.name}</td>
                        <td className="px-4 py-2">{staff.email}</td>

                        <td className="px-4 py-2">{staff.dateCreated}</td>
                      </tr>
                    ))}
                </tbody>
              </table>
            )}
            <Pagination
              currentPage={staffPage}
              totalPages={totalStaffPages}
              onPageChange={setStaffPage}
            />
          </div>
        </div>

        {/* Sales Overview Chart */}
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-4">
          <div className="lg:col-span-4 bg-gray-300 dark:bg-gray-800 p-4 rounded-xl">
            <div className="flex justify-between items-center">
              <h3 className="text-lg font-semibold text-white flex items-center space-x-2">
                <PhilippinePeso className="w-5 h-5 text-purple-900 dark:text-purple-500" />
                <span className="text-black dark:text-white">Sales Overview</span>
              </h3>
              {renderDateFilter(salesFilterDate, setSalesFilterDate)}
            </div>
            {salesLoading ? (
              <div className="flex justify-center items-center h-64">
                <svg className="animate-spin h-8 w-8 text-gray-500" fill="none" viewBox="0 0 24 24">
                  <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                  <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"></path>
                </svg>
              </div>
            ) : (
              <SalesOverviewChart salesData={salesData} />
            )}
          </div>
        </div>

        {/* Product Sales Bar Chart */}
        <div className="bg-gray-200 dark:bg-gray-800 p-4 rounded-xl shadow-md w-full">
          <div className="lg:col-span-4 bg-gray-300 dark:bg-gray-800 p-4 rounded-xl overflow-x-auto">
            <div className="flex justify-between items-center">
              <h3 className="text-lg font-semibold text-white flex items-center space-x-2">
                <PhilippinePeso className="w-5 h-5 text-purple-900 dark:text-purple-500" />
                <span className="text-black dark:text-white">Product Sales</span>
              </h3>
              {renderDateFilter(productSalesFilterDate, setProductSalesFilterDate)}
            </div>
            {productLoading ? (
              <div className="flex justify-center items-center h-350">
                <svg
                  className="animate-spin h-8 w-8 text-purple-500"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    className="opacity-25"
                    cx="12"
                    cy="12" r="10" stroke="currentColor" strokeWidth="4"
                  ></circle>
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"
                  ></path>
                </svg>
              </div>
            ) : (
              <div className="min-w-full">
                <Chart
                  options={{
                    ...productSalesOptions,
                    xaxis: {
                      categories: paginatedProductSalesData.map((data) => data.product_name),
                      labels: { style: { colors: "#666" } },
                    },
                  }}
                  series={[
                    {
                      name: "Total Sales",
                      data: paginatedProductSalesData.map((data) => data.total_sales),
                    },
                  ]}
                  type="bar"
                  height={350}
                  width={Math.max(155, paginatedProductSalesData.length * 100)}
                />
                <Pagination
                  currentPage={productSalesPage}
                  totalPages={totalProductSalesPages}
                  onPageChange={setProductSalesPage}
                />
              </div>
            )}
          </div>
        </div>

        {/* Payment Methods Donut Chart */}
        <div className="bg-gray-200 dark:bg-gray-800 p-4 rounded-xl shadow-md w-full">
          <div className="bg-gray-300 dark:bg-gray-800 p-4 rounded-xl">
            <div className="flex justify-between items-center">
              <h3 className="text-lg font-semibold text-white flex items-center space-x-2">
                <HandCoins className="w-5 h-5 text-purple-900 dark:text-purple-500" />
                <span className="text-black dark:text-white">Payment Method</span>
              </h3>
              {renderDateFilter(paymentFilterDate, setPaymentFilterDate)}
            </div>
            {paymentLoading ? (
              <div className="flex justify-center items-center h-350">
                <svg
                  className="animate-spin h-8 w-8 text-purple-500"
                  xmlns="http://www.w3.org/2000/svg"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <circle
                    className="opacity-25"
                    cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"
                  ></circle>
                  <path
                    className="opacity-75"
                    fill="currentColor"
                    d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z"
                  ></path>
                </svg>
              </div>
            ) : (
              <Chart
                options={paymentOptions}
                series={paymentSeries}
                type="donut"
                height={350}
              />
            )}
          </div>
        </div>

        {/* Leftover Products Section */}
        <div className="bg-gray-200 dark:bg-gray-800 p-4 rounded-xl shadow-md w-full"></div>
          <div className="p-4 bg-gray-300 dark:bg-gray-800 rounded-xl w-full">
            <h3 className="text-lg font-semibold text-white flex items-center space-x-2">
              <ClipboardList className="w-5 h-5 text-purple-900 dark:text-purple-500" />
              <span className="text-black dark:text-white">Leftover Products</span>
            </h3>
            <ul className="mt-4 space-y-2">
              <li className="bg-gray-100 dark:bg-gray-700 p-2 rounded text-black dark:text-white">
                Product 1
              </li>
              <li className="bg-gray-100 dark:bg-gray-700 p-2 rounded text-black dark:text-white">
                Product 2
              </li>
              <li className="bg-gray-100 dark:bg-gray-700 p-2 rounded text-black dark:text-white">
                Product 3
              </li>
              <li className="bg-gray-100 dark:bg-gray-700 p-2 rounded text-black dark:text-white">
                Product 4
              </li>
              <li className="bg-gray-100 dark:bg-gray-700 p-2 rounded text-black dark:text-white">
                Product 5
              </li>
            </ul>
          </div>
        </div>
 
    </AppLayout>
  );
}
